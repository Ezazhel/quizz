{"version":3,"sources":["components/NavBar.js","core/models/Equipes.js","core/dao/DAOEquipes.js","components/StyleFile.js","features/admin/equipes/Equipes.js","features/admin/themeQuestions/QuestionForm.js","features/admin/themeQuestions/questionList/QuestionDisplay.js","features/admin/themeQuestions/ThemesList.js","core/models/Question.js","core/dao/DAOQuestion.js","core/models/Theme.js","core/dao/DAOTheme.js","features/admin/themeQuestions/ThemeQuestion.js","features/admin/Admin.js","features/game/equipesList/EquipesList.js","features/game/themesList/ThemeList.js","features/game/gameInterface/Reponses.js","features/game/gameInterface/GameInterface.js","features/game/Game.js","App.js","index.js"],"names":["HeaderNavigation","props","Navbar","bg","variant","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","NavDropdown","title","Item","Equipes","name","score","this","getAll","JSON","parse","localStorage","getItem","LIST_CONTAINER","styled","div","LIST_ITEM","GAMEMODE","Button","QUESTION_INTERFACE","EquipesForm","initialValues","equipe","enableReinitialize","onSubmit","submit","values","handleSubmit","isSubmitting","Form","inline","Group","Label","Control","Field","required","disabled","type","EquipesList","Object","keys","equipes","map","key","isActive","selectedEquipe","deleteEquipe","selectEquipe","EquipeItem","onClick","event","EquipePage","createOrUpdateEquipe","action","equipePUT","uuid","setItem","stringify","DAOEquipe","setState","setSubmitting","resetForm","stopPropagation","state","Container","Row","Col","React","Component","CONTAINER","MYFORM","BUTTON","QuestionForm","question","questionId","bonneReponse","autreReponses","themeId","selectedTheme","handleChange","handleBlur","controlId","placeholder","onChange","onBlur","value","QuestionsList","questions","length","index","selectedQuestion","editQuestion","deleteQuestion","ThemeItem","selectTheme","theme","e","deleteTheme","ThemesList","addTheme","themes","ListGroup","Question","console","log","getQuestionByTheme","allQuestions","Theme","getThemes","ThemeQuestion","actions","newTheme","DaoTheme","addQuestionToTheme","questionObject","newQuestion","DaoQuestion","deletedQuestion","deletedTheme","allThemes","error","idTheme","fluid","md","importThemes","exact","path","component","BUTTON_BONUS","idEquipe","data-id-equipe","data-value","sort","a","b","i","style","display","flexDirection","giveBonusOrMalusSelectedEquipe","Badge","sortByName","object","ListOfThemePickable","themesToPickFrom","v","isBuilding","removeThemeFromList","finalizeBuilding","BuildingList","addBuildingThemes","setIsBuilding","ThemeList","newBuildingThemesArray","target","allThemesWithoutAddedTheme","choixTheme","displayThemes","DAOTheme","isLoaded","validateList","CONTAINER_RESPONSE","BUTTON_RESPONSE","shuffle","array","j","Math","floor","random","CashReponses","useState","isAnswered","setIsAnswered","revealAnswer","dataset","setTimeout","answer","data-bonne-reponse","DuoCarreReponses","arrayToShuffle","mode","split","Reponses","reponse","setVariantButtonOnAnswered","Mode","SelectionGameMode","percent","timer","baseTimer","ProgressBar","animated","now","minWidth","height","label","setMode","toUpperCase","skip","GameInterface","clearTimeout","timeout","clearInterval","interval","launchTimer","questionPose","setInterval","finish","canLaunch","width","minHeight","fontSize","questionToDisplay","Game","initialize","currentQuestionIndex","themeQuestions","DAOQuestion","updateStateAndSave","newState","setNewScore","changeQuestionAndRemoveQuestionFromArray","parseInt","min","loadGameStateFromLocalStorageIfExistElseCreate","objectGame","App","Administration","window","onbeforeunload","returnValue","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.6d1dbb06.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, NavDropdown } from \"react-bootstrap\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport { Link } from \"react-router-dom\";\r\nconst HeaderNavigation = (props) => (\r\n    <>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand as={Link} to=\"/\">\r\n                {\" \"}\r\n                Rift's Quizz{\" \"}\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <NavDropdown title=\"Admin\" id=\"admin-dropdown\">\r\n                        <NavDropdown.Item as={Link} to=\"/admin/themesQuestions\">\r\n                            {\" \"}\r\n                            Thèmes et Questions{\" \"}\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Item as={Link} to=\"/admin/equipes\">\r\n                            {\" \"}\r\n                            Equipes{\" \"}\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    </>\r\n);\r\nexport default HeaderNavigation;\r\n","export class Equipes {\r\n    constructor({ name, id, score = 0 }) {\r\n        this.name = name;\r\n        this.id = id;\r\n        this.score = score;\r\n    }\r\n}\r\n","import uuid from \"react-uuid\";\r\nimport { Equipes } from \"../models/Equipes\";\r\nexport const EQUIPES = \"equipes\";\r\n\r\nexport const insertOrUpdate = (equipePUT) => {\r\n    let equipes = getAll();\r\n    equipePUT = new Equipes({\r\n        id: equipePUT?.id ?? uuid(),\r\n        name: equipePUT.name,\r\n    });\r\n    equipes = {\r\n        ...equipes,\r\n        [equipePUT.id]: equipePUT,\r\n    };\r\n    localStorage.setItem(EQUIPES, JSON.stringify(equipes));\r\n};\r\n\r\nexport const deleteEquipe = (id) => {\r\n    let equipes = getAll();\r\n    delete equipes[id];\r\n    localStorage.setItem(EQUIPES, JSON.stringify(equipes));\r\n};\r\n\r\nexport const getAll = () => {\r\n    return JSON.parse(localStorage.getItem(EQUIPES)) ?? {};\r\n};\r\n","import { Button } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const LIST_CONTAINER = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 1;\r\n\r\n    label {\r\n        color: #24b9b6;\r\n        font-size: 1.2em;\r\n        font-weight: 400;\r\n    }\r\n`;\r\n\r\nexport const LIST_ITEM = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: 0.2em 0.2em;\r\n    border-radius: 5px;\r\n    background-color: #5c6a79;\r\n    -webkit-box-shadow: 0px 0px 5px 0px rgba(127, 140, 141, 0.4);\r\n    -moz-box-shadow: 0px 0px 5px 0px rgba(127, 140, 141, 0.4);\r\n    box-shadow: 0px 0px 5px 0px rgba(127, 140, 141, 0.4);\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n        label {\r\n            color: #aeb2b7;\r\n        }\r\n        background-color: #005b50;\r\n    }\r\n    &.active {\r\n        label {\r\n            color: #ecf0f1;\r\n        }\r\n        background-color: #005b50;\r\n    }\r\n\r\n    label {\r\n        color: #bdc3c7;\r\n        margin-left: 1.2em;\r\n        font-size: 1.2em;\r\n        font-weigth: 400;\r\n        display: flex;\r\n        flex-grow: 1;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        margin-bottom: 0px;\r\n    }\r\n    button {\r\n        display: flex;\r\n    }\r\n`;\r\n\r\nexport const GAMEMODE = styled(Button)`\r\n    border: none;\r\n    &.cash {\r\n        background: #7e349d;\r\n    }\r\n    &.duo {\r\n        background: #f1c40f;\r\n    }\r\n    &.carre {\r\n        background: #c0392b;\r\n    }\r\n`;\r\n\r\nexport const QUESTION_INTERFACE = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 2;\r\n    border-radius: 5px;\r\n    min-height: 50vh;\r\n    margin: 1rem !important;\r\n\r\n    .initialize {\r\n        margin: auto;\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport { Field, Formik } from \"formik\";\r\nimport { Button, Col, Container, Form, Row } from \"react-bootstrap\";\r\nimport * as DAOEquipe from \"../../../core/dao/DAOEquipes\";\r\nimport { LIST_CONTAINER, LIST_ITEM } from \"../../../components/StyleFile\";\r\nconst EquipesForm = (props) => {\r\n    return (\r\n        <div>\r\n            <h3> Listes des équipes </h3>\r\n            <Formik\r\n                initialValues={{\r\n                    name: props.equipe?.name ?? \"\",\r\n                    id: props.equipe?.id ?? null,\r\n                }}\r\n                enableReinitialize={true}\r\n                onSubmit={props.submit}\r\n            >\r\n                {({ values, handleSubmit, isSubmitting }) => (\r\n                    <Form onSubmit={handleSubmit} inline className=\"m-4\">\r\n                        <Form.Group>\r\n                            <Form.Label>Nom de l'équipe</Form.Label>\r\n                            <Form.Control\r\n                                as={Field}\r\n                                name=\"name\"\r\n                                required\r\n                                className=\"ml-2 mr-2\"\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        <Button\r\n                            disabled={isSubmitting}\r\n                            type=\"submit\"\r\n                            variant=\"outline-success\"\r\n                        >\r\n                            {values.id === null ? \"Créer\" : \"Editer\"}\r\n                        </Button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst EquipesList = (props) => {\r\n    return (\r\n        <LIST_CONTAINER>\r\n            {Object.keys(props.equipes).map((id) => (\r\n                <EquipeItem\r\n                    equipe={props.equipes[id]}\r\n                    key={id}\r\n                    isActive={props.selectedEquipe?.id === id}\r\n                    deleteEquipe={props.deleteEquipe}\r\n                    selectEquipe={props.selectEquipe}\r\n                />\r\n            ))}\r\n        </LIST_CONTAINER>\r\n    );\r\n};\r\n\r\nconst EquipeItem = (props) => {\r\n    return (\r\n        <LIST_ITEM\r\n            className={props.isActive ? \"active\" : \"\"}\r\n            onClick={() => props.selectEquipe(props.equipe)}\r\n        >\r\n            <label>{props.equipe.name}</label>\r\n            <Button\r\n                variant=\"danger\"\r\n                type=\"button\"\r\n                onClick={(event) => props.deleteEquipe(props.equipe.id, event)}\r\n            >\r\n                X\r\n            </Button>\r\n        </LIST_ITEM>\r\n    );\r\n};\r\n\r\nclass EquipePage extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            equipes: DAOEquipe.getAll(),\r\n            selectedEquipe: null,\r\n        };\r\n    }\r\n\r\n    createOrUpdateEquipe = (values, action) => {\r\n        DAOEquipe.insertOrUpdate(values);\r\n        this.setState({\r\n            equipes: DAOEquipe.getAll(),\r\n            selectedEquipe: null,\r\n        });\r\n        action.setSubmitting(false);\r\n        action.resetForm();\r\n    };\r\n\r\n    deleteEquipe = (id, event) => {\r\n        event.stopPropagation();\r\n        DAOEquipe.deleteEquipe(id);\r\n        this.setState({\r\n            equipes: DAOEquipe.getAll(),\r\n            selectedEquipe:\r\n                id === this.state.selectedEquipe?.id\r\n                    ? null\r\n                    : this.state.selectedEquipe,\r\n        });\r\n    };\r\n    selectEquipe = (equipe) => {\r\n        this.setState({\r\n            selectedEquipe:\r\n                equipe.id === this.state.selectedEquipe?.id ? null : equipe,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <EquipesForm\r\n                                equipe={this.state.selectedEquipe}\r\n                                submit={this.createOrUpdateEquipe}\r\n                            />\r\n                            <EquipesList\r\n                                selectedEquipe={this.state.selectedEquipe}\r\n                                equipes={this.state.equipes}\r\n                                deleteEquipe={this.deleteEquipe}\r\n                                selectEquipe={this.selectEquipe}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default EquipePage;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { Formik, Field } from \"formik\";\r\n\r\nconst CONTAINER = styled.div`\r\n    background: #5c6a79;\r\n    height: auto;\r\n    width: 90%;\r\n    border-radius: 5px;\r\n    color: snow;\r\n    -webkit-box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.4);\r\n    -moz-box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.4);\r\n    box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.4);\r\n\r\n    @media (min-width: 786px) {\r\n        width: 60%;\r\n    }\r\n\r\n    label {\r\n        color: #bdc3c7;\r\n        font-size: 1.2em;\r\n        font-weight: 400;\r\n    }\r\n\r\n    h1 {\r\n        color: #bdc3c7;\r\n        padding-top: 0.5em;\r\n    }\r\n\r\n    .form-group {\r\n        margin-bottom: 2.5em;\r\n    }\r\n`;\r\nconst MYFORM = styled(Form)`\r\n    width: 90%;\r\n    text-align: left;\r\n    padding-top: 2em;\r\n    padding-bottom: 2em;\r\n\r\n    @media (min-width: 786px) {\r\n        width: 50%;\r\n    }\r\n`;\r\n\r\nconst BUTTON = styled(Button)`\r\n    font-size: 1.2em;\r\n    font-weight: 400;\r\n`;\r\n\r\nconst QuestionForm = (props) => {\r\n    return (\r\n        <CONTAINER>\r\n            <Formik\r\n                initialValues={{\r\n                    question: props.question?.question ?? \"\",\r\n                    questionId: props.question?.id ?? null,\r\n                    bonneReponse: props.question?.bonneReponse ?? \"\",\r\n                    autreReponses: props.question?.autreReponses ?? \"\",\r\n                    themeId: props.selectedTheme.id,\r\n                }}\r\n                enableReinitialize={true}\r\n                onSubmit={props.submit}\r\n            >\r\n                {({\r\n                    values,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit,\r\n                    isSubmitting,\r\n                }) => (\r\n                    <MYFORM className=\"mx-auto\" onSubmit={handleSubmit}>\r\n                        <Form.Group controlId=\"formTheme\">\r\n                            <Form.Label>\r\n                                <h5>Thème : {props.selectedTheme.name}</h5>\r\n                            </Form.Label>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formQuestion\">\r\n                            <Form.Label>Question :</Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                name=\"question\"\r\n                                placeholder=\"Le texte de ta question, ce qui va s'afficher à l'écran des joueurs\"\r\n                                onChange={handleChange}\r\n                                required\r\n                                onBlur={handleBlur}\r\n                                value={values.question}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBonneReponse\">\r\n                            <Form.Label>Bonne réponse :</Form.Label>\r\n                            <Form.Control\r\n                                as={Field}\r\n                                name=\"bonneReponse\"\r\n                                required\r\n                                placeholder=\"Pas de secret, écris la bonne réponse\"\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formAutreReponses\">\r\n                            <Form.Label>Autres réponses :</Form.Label>\r\n                            <Form.Control\r\n                                as={Field}\r\n                                name=\"autreReponses\"\r\n                                placeholder=\"Sépare les réponses par des ';'\"\r\n                                required\r\n                            />\r\n                        </Form.Group>\r\n                        <BUTTON\r\n                            type=\"submit\"\r\n                            variant=\"outline-success\"\r\n                            disabled={isSubmitting}\r\n                        >\r\n                            {values.questionId !== null\r\n                                ? \"Editer la question\"\r\n                                : \"Ajouter la question au thème\"}\r\n                        </BUTTON>\r\n                    </MYFORM>\r\n                )}\r\n            </Formik>\r\n        </CONTAINER>\r\n    );\r\n};\r\n\r\nexport default QuestionForm;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { LIST_CONTAINER, LIST_ITEM } from \"../../../../components/StyleFile\";\r\nconst QuestionsList = (props) => (\r\n    <div>\r\n        <h3> Question du thème</h3>\r\n        {props.questions.length > 0 ? (\r\n            <LIST_CONTAINER>\r\n                {props.questions.map((value, index) => (\r\n                    <LIST_ITEM\r\n                        key={value.id}\r\n                        className={\r\n                            props.selectedQuestion?.id === value.id\r\n                                ? \"active\"\r\n                                : \"\"\r\n                        }\r\n                        onClick={() => props.editQuestion(value)}\r\n                    >\r\n                        <label>Question : {++index}</label>\r\n                        <Button\r\n                            onClick={() => props.deleteQuestion(value)}\r\n                            variant=\"danger\"\r\n                        >\r\n                            X\r\n                        </Button>\r\n                    </LIST_ITEM>\r\n                ))}\r\n            </LIST_CONTAINER>\r\n        ) : (\r\n            \"Pas encore de Questions\"\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default QuestionsList;\r\n","import { Field, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { Button, Form, ListGroup } from \"react-bootstrap\";\r\nimport { LIST_CONTAINER, LIST_ITEM } from \"../../../components/StyleFile\";\r\nconst ThemesList = (props) => (\r\n    <div>\r\n        <h3> Listes des Thèmes </h3>{\" \"}\r\n        <div>\r\n            <Formik initialValues={{ theme: \"\" }} onSubmit={props.addTheme}>\r\n                {({ handleSubmit, isSubmitting }) => (\r\n                    <Form onSubmit={handleSubmit} inline className=\"m-4\">\r\n                        <Form.Group>\r\n                            <Form.Control\r\n                                as={Field}\r\n                                name=\"theme\"\r\n                                className=\"ml-2 mr-2\"\r\n                                placeholder=\"Nom du thème\"\r\n                                required\r\n                            />\r\n                        </Form.Group>\r\n                        <Button\r\n                            disabled={isSubmitting}\r\n                            type=\"submit\"\r\n                            variant=\"outline-success\"\r\n                        >\r\n                            Ajouter un Thème\r\n                        </Button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n        <LIST_CONTAINER>\r\n            {Object.keys(props.themes).map((themeId) => (\r\n                <ThemeItem\r\n                    theme={props.themes[themeId]}\r\n                    key={themeId}\r\n                    isActive={\r\n                        props.selectedTheme !== null &&\r\n                        props.selectedTheme.id === themeId\r\n                    }\r\n                    selectTheme={() => props.selectTheme(props.themes[themeId])}\r\n                    deleteTheme={props.deleteTheme}\r\n                />\r\n            ))}\r\n        </LIST_CONTAINER>\r\n        <ListGroup as=\"ul\"></ListGroup>\r\n    </div>\r\n);\r\n\r\nconst ThemeItem = (props) => (\r\n    <LIST_ITEM\r\n        className={` ${props.isActive ? \"active\" : \"\"}`}\r\n        onClick={props.selectTheme}\r\n    >\r\n        <label>{props.theme.name}</label>\r\n        <Button\r\n            className=\"align-self-end\"\r\n            variant=\"danger\"\r\n            onClick={(e) => props.deleteTheme(props.theme, e)}\r\n        >\r\n            X\r\n        </Button>\r\n    </LIST_ITEM>\r\n);\r\n\r\nexport default ThemesList;\r\n","export class Question {\r\n    constructor({ id, question, bonneReponse, autreReponses, themeId }) {\r\n        console.log(\"const question\", id);\r\n        this.id = id;\r\n        this.question = question;\r\n        this.bonneReponse = bonneReponse;\r\n        this.autreReponses = autreReponses;\r\n        this.themeId = themeId;\r\n    }\r\n}\r\n","import { Question } from \"../models/Question\";\r\nimport uuid from \"react-uuid\";\r\nexport const QUESTIONS = \"questions\";\r\n\r\nexport const insertUpdateQuestion = (questionObject) => {\r\n    let questions = JSON.parse(localStorage.getItem(QUESTIONS)) ?? {};\r\n    questionObject.id = questionObject?.id ?? uuid();\r\n    let newQuestion = new Question({\r\n        ...questionObject,\r\n    });\r\n    questions = {\r\n        ...questions,\r\n        [newQuestion.themeId]: {\r\n            ...questions[newQuestion.themeId],\r\n            [newQuestion.id]: newQuestion,\r\n        },\r\n    };\r\n    localStorage.setItem(QUESTIONS, JSON.stringify(questions));\r\n};\r\n\r\nexport const getQuestionByTheme = (themeId) => {\r\n    let allQuestions = JSON.parse(localStorage.getItem(QUESTIONS)) ?? {};\r\n    return Object.keys(allQuestions[themeId] ?? {}).map(\r\n        (id) => allQuestions[themeId][id]\r\n    );\r\n};\r\n\r\nexport const deleteQuestionOfTheme = (deletedQuestion) => {\r\n    let { themeId, id: questionId } = deletedQuestion;\r\n    let allQuestions = JSON.parse(localStorage.getItem(QUESTIONS));\r\n    delete allQuestions[themeId][questionId];\r\n    localStorage.setItem(QUESTIONS, JSON.stringify(allQuestions));\r\n};\r\n\r\nexport const deleteAllQuestionOfTheme = (idTheme) => {\r\n    let allQuestions = JSON.parse(localStorage.getItem(QUESTIONS));\r\n    delete allQuestions[idTheme];\r\n    localStorage.setItem(QUESTIONS, JSON.stringify(allQuestions));\r\n};\r\n","export class Theme {\r\n    constructor(id, name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n}\r\n","import { Theme } from \"../models/Theme\";\r\nimport uuid from \"react-uuid\";\r\n\r\nexport const THEMES = \"themes\";\r\n\r\nexport const deleteTheme = (deletedTheme) => {\r\n    try {\r\n        let allThemes = getThemes();\r\n        delete allThemes[deletedTheme.id];\r\n        localStorage.setItem(THEMES, JSON.stringify(allThemes));\r\n    } catch (error) {}\r\n};\r\n\r\nexport const insertUpdateThemes = (theme) => {\r\n    let themes = getThemes();\r\n\r\n    let { id, name } = theme;\r\n\r\n    let newTheme = new Theme(id ?? uuid(), name);\r\n\r\n    themes[newTheme.id] = newTheme;\r\n    localStorage.setItem(THEMES, JSON.stringify(themes));\r\n};\r\n\r\nexport const getThemes = () => {\r\n    return JSON.parse(localStorage.getItem(THEMES)) ?? {};\r\n};\r\n","import React from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport QuestionForm from \"./QuestionForm\";\r\nimport QuestionsList from \"./questionList/QuestionDisplay\";\r\nimport ThemesList from \"./ThemesList\";\r\nimport * as DaoQuestion from \"../../../core/dao/DAOQuestion\";\r\nimport * as DaoTheme from \"../../../core/dao/DAOTheme\";\r\n\r\nclass ThemeQuestion extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            themes: DaoTheme.getThemes(),\r\n            questions: [],\r\n            selectedQuestion: null,\r\n            selectedTheme: null,\r\n        };\r\n    }\r\n\r\n    addTheme = (values, actions) => {\r\n        DaoTheme.insertUpdateThemes({\r\n            name: values.theme,\r\n            id: this.state.themes.length,\r\n        });\r\n        this.setState({\r\n            themes: DaoTheme.getThemes(),\r\n        });\r\n        actions.setSubmitting(false);\r\n        actions.resetForm();\r\n    };\r\n\r\n    addQuestionToTheme = (values, actions) => {\r\n        DaoQuestion.insertUpdateQuestion({\r\n            themeId: values.themeId,\r\n            id: values.questionId,\r\n            question: values.question,\r\n            bonneReponse: values.bonneReponse,\r\n            autreReponses: values.autreReponses,\r\n        });\r\n        this.setState({\r\n            questions: [...DaoQuestion.getQuestionByTheme(values.themeId)],\r\n            selectedQuestion: null,\r\n        });\r\n        actions.setSubmitting(false);\r\n        actions.resetForm();\r\n    };\r\n\r\n    selectTheme = (selectedTheme) => {\r\n        this.setState({\r\n            selectedQuestion:\r\n                this.state.selectedQuestion?.themeId !== selectedTheme.id\r\n                    ? null\r\n                    : this.state.selectedQuestion,\r\n            selectedTheme:\r\n                selectedTheme.id === this.state.selectedTheme?.id\r\n                    ? null\r\n                    : selectedTheme,\r\n            questions: [...DaoQuestion.getQuestionByTheme(selectedTheme.id)],\r\n        });\r\n    };\r\n\r\n    editQuestion = (selectedQuestion) => {\r\n        this.setState({\r\n            selectedQuestion:\r\n                this.state.selectedQuestion?.id === selectedQuestion.id\r\n                    ? null\r\n                    : selectedQuestion,\r\n        });\r\n    };\r\n\r\n    deleteQuestion = (deletedQuestion) => {\r\n        console.log(deletedQuestion);\r\n        DaoQuestion.deleteQuestionOfTheme(deletedQuestion);\r\n        this.setState({\r\n            questions: DaoQuestion.getQuestionByTheme(deletedQuestion.themeId),\r\n            selectedQuestion:\r\n                deletedQuestion.id === this.state?.selectedQuestion?.id\r\n                    ? null\r\n                    : this.state.selectedQuestion,\r\n        });\r\n    };\r\n\r\n    deleteTheme = (deleteTheme, event) => {\r\n        event.stopPropagation();\r\n        DaoTheme.deleteTheme(deleteTheme);\r\n        DaoQuestion.deleteAllQuestionOfTheme(deleteTheme.id);\r\n        this.setState({\r\n            themes: DaoTheme.getThemes(),\r\n            selectedQuestion:\r\n                this.state.selectedQuestion?.themeId === deleteTheme.id\r\n                    ? null\r\n                    : this.state.selectedQuestion,\r\n            selectedTheme:\r\n                deleteTheme.id === this.state.selectedTheme?.id\r\n                    ? null\r\n                    : this.state.selectedTheme,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid className=\"p-3\">\r\n                <Row>\r\n                    <Col md={\"3\"} className=\"mx-auto\">\r\n                        <ThemesList\r\n                            importThemes={this.importThemes}\r\n                            selectedTheme={this.state.selectedTheme}\r\n                            themes={this.state.themes}\r\n                            selectTheme={this.selectTheme}\r\n                            addTheme={this.addTheme}\r\n                            deleteTheme={this.deleteTheme}\r\n                        ></ThemesList>\r\n                    </Col>\r\n                    {this.state.selectedTheme !== null && (\r\n                        <>\r\n                            <Col className=\"d-flex justify-content-center\">\r\n                                <QuestionForm\r\n                                    submit={this.addQuestionToTheme}\r\n                                    selectedTheme={this.state.selectedTheme}\r\n                                    question={this.state.selectedQuestion}\r\n                                ></QuestionForm>\r\n                            </Col>\r\n                            <Col md=\"2\">\r\n                                <QuestionsList\r\n                                    selectedQuestion={\r\n                                        this.state.selectedQuestion\r\n                                    }\r\n                                    editQuestion={this.editQuestion}\r\n                                    deleteQuestion={this.deleteQuestion}\r\n                                    questions={this.state.questions}\r\n                                ></QuestionsList>\r\n                            </Col>\r\n                        </>\r\n                    )}\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ThemeQuestion;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Equipes from \"./equipes/Equipes\";\r\nimport ThemeQuestion from \"./themeQuestions/ThemeQuestion\";\r\n\r\nexport default () => (\r\n    <>\r\n        <Switch>\r\n            <Route\r\n                exact\r\n                path=\"/admin/themesQuestions\"\r\n                component={ThemeQuestion}\r\n            />\r\n            <Route exact path=\"/admin/equipes\" component={Equipes} />\r\n        </Switch>\r\n    </>\r\n);\r\n","import React from \"react\";\r\nimport { Badge, Button } from \"react-bootstrap\";\r\n\r\nconst BUTTON_BONUS = ({ idEquipe, value, ...props }) => (\r\n    <Button\r\n        data-id-equipe={idEquipe}\r\n        data-value={value}\r\n        className=\"m-2\"\r\n        {...props}\r\n    >\r\n        {value > 0 ? `+${value}` : value}\r\n    </Button>\r\n);\r\nexport default (props) => {\r\n    return (\r\n        <div className=\"d-flex flex-column flex-grow-1\">\r\n            {Object.keys(props.equipes)\r\n                .sort((a, b) => props.equipes[b].score - props.equipes[a].score)\r\n                .map((idEquipe, i) => (\r\n                    <div\r\n                        key={props.equipes[idEquipe].name}\r\n                        onClick={() =>\r\n                            props.selectEquipe(props.equipes[idEquipe])\r\n                        }\r\n                        className={`${\r\n                            props.selectedEquipe?.id === idEquipe\r\n                                ? \"bg-dark \"\r\n                                : \" \"\r\n                        } shadow-game m-3 rounded\r\n                        `}\r\n                        style={{ display: \"flex\", flexDirection: \"column\" }}\r\n                    >\r\n                        <div className=\"text-center\">\r\n                            <label>\r\n                                <span>{props.equipes[idEquipe].name}</span>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"d-flex align-self-center align-items-center\">\r\n                            <BUTTON_BONUS\r\n                                value=\"1\"\r\n                                idEquipe={idEquipe}\r\n                                variant=\"outline-success\"\r\n                                onClick={props.giveBonusOrMalusSelectedEquipe}\r\n                            />\r\n                            <Badge\r\n                                variant=\"warning\"\r\n                                className=\"p-2 align-middle\"\r\n                            >\r\n                                {props.equipes[idEquipe].score}\r\n                            </Badge>\r\n                            <BUTTON_BONUS\r\n                                value=\"-1\"\r\n                                idEquipe={idEquipe}\r\n                                onClick={props.giveBonusOrMalusSelectedEquipe}\r\n                                variant=\"outline-danger\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport * as DAOTheme from \"../../../core/dao/DAOTheme\";\r\nimport { LIST_ITEM, LIST_CONTAINER } from \"../../../components/StyleFile\";\r\n\r\nconst sortByName = (a, b, object) =>\r\n    object[a].name > object[b].name\r\n        ? 1\r\n        : object[b].name > object[a].name\r\n        ? -1\r\n        : 0;\r\nconst ListOfThemePickable = (props) => {\r\n    return (\r\n        <LIST_CONTAINER>\r\n            {Object.keys(props.themesToPickFrom)\r\n                .sort((a, b) => sortByName(a, b, props.themesToPickFrom))\r\n                .map((v, i) => (\r\n                    <LIST_ITEM\r\n                        key={v}\r\n                        onClick={() =>\r\n                            !props.isBuilding\r\n                                ? props.selectTheme(props.themesToPickFrom[v])\r\n                                : false\r\n                        }\r\n                    >\r\n                        <label>{props.themesToPickFrom[v].name}</label>\r\n                        {props.isBuilding && (\r\n                            <Button\r\n                                variant=\"danger\"\r\n                                onClick={() => props.removeThemeFromList(v)}\r\n                            >\r\n                                X\r\n                            </Button>\r\n                        )}\r\n                    </LIST_ITEM>\r\n                ))}\r\n            {Object.keys(props.themesToPickFrom).length > 0 &&\r\n                props.isBuilding && (\r\n                    <Button\r\n                        variant=\"outline-success\"\r\n                        onClick={props.finalizeBuilding}\r\n                    >\r\n                        Finaliser la liste\r\n                    </Button>\r\n                )}\r\n        </LIST_CONTAINER>\r\n    );\r\n};\r\n\r\nconst BuildingList = (props) => {\r\n    return !props.isBuilding ? (\r\n        <Button variant=\"outline-light\" onClick={props.setIsBuilding}>\r\n            Création listes des thèmes\r\n        </Button>\r\n    ) : (\r\n        <select\r\n            onChange={props.addBuildingThemes}\r\n            value=\"\"\r\n            className=\"form-control\"\r\n        >\r\n            <option value=\"\" disabled>\r\n                Au clique sur un thème, celui-ci est choisi\r\n            </option>\r\n            {Object.keys(props.allThemes)\r\n                .sort((a, b) => sortByName(a, b, props.allThemes))\r\n                .map((v, i) => (\r\n                    <option key={v} value={v}>\r\n                        {props.allThemes[v].name}\r\n                    </option>\r\n                ))}\r\n        </select>\r\n    );\r\n};\r\nexport default class ThemeList extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            isBuilding: false,\r\n            themesToPickFrom: {},\r\n            choixTheme: false,\r\n            allThemes: DAOTheme.getThemes(),\r\n            isLoaded: false,\r\n        };\r\n    }\r\n    update;\r\n    // componentDidMount() {\r\n    //     const objectThemeList = JSON.parse(localStorage.getItem(\"ThemeList\"));\r\n    //     this.setState({\r\n    //         isLoaded: true,\r\n    //         ...objectThemeList,\r\n    //     });\r\n    // }\r\n    removeThemeFromList = (themeId) => {\r\n        const allThemes = {\r\n            ...this.state.allThemes,\r\n            [themeId]: this.state.themesToPickFrom[themeId],\r\n        };\r\n        let newBuildingThemesArray = this.state.themesToPickFrom;\r\n        delete newBuildingThemesArray[themeId];\r\n\r\n        this.setState({\r\n            themesToPickFrom: newBuildingThemesArray,\r\n            allThemes,\r\n        });\r\n    };\r\n\r\n    addBuildingThemes = (event) => {\r\n        const themeId = event.target.value;\r\n        this.setState(\r\n            {\r\n                themesToPickFrom: {\r\n                    ...this.state.themesToPickFrom,\r\n                    [themeId]: this.state.allThemes[themeId],\r\n                },\r\n            },\r\n            () => {\r\n                const allThemesWithoutAddedTheme = this.state.allThemes;\r\n                delete allThemesWithoutAddedTheme[themeId];\r\n                this.setState({\r\n                    allThemes: allThemesWithoutAddedTheme,\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    setIsBuilding = () => {\r\n        this.setState({\r\n            isBuilding: true,\r\n        });\r\n    };\r\n\r\n    finalizeBuilding = () => {\r\n        this.setState({\r\n            isBuilding: false,\r\n            choixTheme: false,\r\n        });\r\n    };\r\n\r\n    displayThemes = () => {\r\n        this.setState({\r\n            choixTheme: true,\r\n        });\r\n    };\r\n\r\n    selectTheme = (theme) => {\r\n        delete this.state.themesToPickFrom[theme.id];\r\n        this.setState({\r\n            choixTheme: false,\r\n        });\r\n        this.props.selectTheme(theme);\r\n    };\r\n    render() {\r\n        return (\r\n            <div className=\"d-flex flex-column flex-grow-1 m-3 shadow-game\">\r\n                <h2 className=\"text-center\">\r\n                    {this.props.selectedTheme?.name ?? \"\"}\r\n                </h2>\r\n                <div className=\"d-flex justify-content-around\">\r\n                    {Object.keys(this.state.themesToPickFrom).length > 0 &&\r\n                    !this.state.isBuilding ? (\r\n                        <Button\r\n                            variant=\"outline-light\"\r\n                            onClick={this.displayThemes}\r\n                        >\r\n                            Selectionner un thème\r\n                        </Button>\r\n                    ) : (\r\n                        <BuildingList\r\n                            isBuilding={this.state.isBuilding}\r\n                            setIsBuilding={this.setIsBuilding}\r\n                            addBuildingThemes={this.addBuildingThemes}\r\n                            allThemes={this.state.allThemes}\r\n                        />\r\n                    )}\r\n                </div>\r\n                <div>\r\n                    {(this.state.choixTheme || this.state.isBuilding) && (\r\n                        <ListOfThemePickable\r\n                            validateList={this.addBuildingThemes}\r\n                            finalizeBuilding={this.finalizeBuilding}\r\n                            selectTheme={this.selectTheme}\r\n                            themesToPickFrom={this.state.themesToPickFrom}\r\n                            removeThemeFromList={this.removeThemeFromList}\r\n                            isBuilding={this.state.isBuilding}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button, Col } from \"react-bootstrap\";\r\n\r\nconst CONTAINER_RESPONSE = styled.div`\r\n    display: grid;\r\n    grid-gap: 1rem;\r\n    grid-template-columns: repeat(auto-fit, minmax(40%, 1fr));\r\n    grid-auto-rows: 1fr;\r\n    padding: 40px;\r\n`;\r\nconst BUTTON_RESPONSE = styled(Button)`\r\n    height: auto;\r\n    min-height: 100px;\r\n    min-width: 33%;\r\n    font-size: 1.5rem;\r\n`;\r\n\r\nconst getBadReponse = (autreReponses) => {\r\n    return [autreReponses.split(\";\")[0]];\r\n};\r\nconst shuffle = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n};\r\n\r\nconst CashReponses = (props) => {\r\n    let [isAnswered, setIsAnswered] = useState(false);\r\n\r\n    const revealAnswer = (e) => {\r\n        const bonneReponse = e.target.dataset.bonneReponse === \"true\";\r\n        setIsAnswered(true);\r\n        setTimeout(() => props.answer(bonneReponse), 1000);\r\n    };\r\n    return (\r\n        <div className=\"d-flex flex-column\">\r\n            <div className=\"d-flex justify-content-around\">\r\n                <BUTTON_RESPONSE\r\n                    variant=\"outline-success\"\r\n                    data-bonne-reponse={true}\r\n                    onClick={revealAnswer}\r\n                >\r\n                    Oui\r\n                </BUTTON_RESPONSE>\r\n                <BUTTON_RESPONSE\r\n                    variant=\"outline-danger\"\r\n                    data-bonne-reponse={false}\r\n                    onClick={revealAnswer}\r\n                >\r\n                    Non\r\n                </BUTTON_RESPONSE>\r\n            </div>\r\n            {isAnswered && props.bonneReponse && (\r\n                <div className=\"m-2 text-center\">\r\n                    <h1>{props.bonneReponse}</h1>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nclass DuoCarreReponses extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        let arrayToShuffle =\r\n            props.mode.name === \"duo\"\r\n                ? getBadReponse(props.question.autreReponses)\r\n                : props.question.autreReponses.split(\";\");\r\n        this.state = {\r\n            isAnswered: false,\r\n            Reponses: shuffle([props.question.bonneReponse, ...arrayToShuffle]),\r\n        };\r\n    }\r\n\r\n    revealAnswer = (e) => {\r\n        const bonneReponse = e.target.dataset.bonneReponse === \"true\";\r\n        this.setState(\r\n            {\r\n                isAnswered: true,\r\n            },\r\n            () => {\r\n                setTimeout(() => this.props.answer(bonneReponse), 1000);\r\n            }\r\n        );\r\n    };\r\n    setVariantButtonOnAnswered(reponse) {\r\n        return this.state.isAnswered\r\n            ? reponse === this.props.question?.bonneReponse ?? false\r\n                ? \"success\"\r\n                : \"danger\"\r\n            : \"outline-light\";\r\n    }\r\n    render() {\r\n        return this.state.Reponses.map((v) => (\r\n            <BUTTON_RESPONSE\r\n                key={v}\r\n                variant={this.setVariantButtonOnAnswered(v)}\r\n                data-bonne-reponse={\r\n                    v === this.props?.question?.bonneReponse ?? false\r\n                }\r\n                onClick={this.revealAnswer}\r\n            >\r\n                {v}\r\n            </BUTTON_RESPONSE>\r\n        ));\r\n    }\r\n}\r\n\r\nexport default (props) => {\r\n    return (\r\n        <CONTAINER_RESPONSE>\r\n            {props.mode !== null && props.mode.name !== \"cash\" ? (\r\n                <DuoCarreReponses\r\n                    mode={props.mode}\r\n                    answer={props.answer}\r\n                    question={props.question}\r\n                />\r\n            ) : (\r\n                <CashReponses\r\n                    answer={props.answer}\r\n                    bonneReponse={props.question?.bonneReponse}\r\n                />\r\n            )}\r\n        </CONTAINER_RESPONSE>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport Reponses from \"./Reponses\";\r\nimport { Button, ProgressBar } from \"react-bootstrap\";\r\nimport { QUESTION_INTERFACE } from \"../../../components/StyleFile\";\r\nimport { GAMEMODE } from \"../../../components/StyleFile\";\r\n\r\nconst Mode = [\r\n    { name: \"cash\", score: 4 },\r\n    { name: \"carre\", score: 2 },\r\n    { name: \"duo\", score: 1 },\r\n];\r\n\r\nconst SelectionGameMode = (props) => {\r\n    const percent = (props.timer / props.baseTimer) * 100;\r\n    return (\r\n        <div className=\"d-flex flex-column\">\r\n            <ProgressBar\r\n                animated\r\n                variant={\r\n                    percent <= 50\r\n                        ? percent <= 25\r\n                            ? \"danger\"\r\n                            : \"warning\"\r\n                        : \"success\"\r\n                }\r\n                now={percent}\r\n                style={{ minWidth: \"100%\", height: \"5vh\" }}\r\n                label={`${props.timer}s`}\r\n            ></ProgressBar>\r\n            <div className=\"d-flex justify-content-around m-3\">\r\n                {Object.keys(Mode).map((v, i) => (\r\n                    <GAMEMODE\r\n                        className={Mode[v].name}\r\n                        key={Mode[v].name}\r\n                        onClick={() => props.setMode(Mode[v])}\r\n                    >\r\n                        {Mode[v].name.toUpperCase()}\r\n                    </GAMEMODE>\r\n                ))}\r\n                {percent === 0 && (\r\n                    <Button\r\n                        data-bonne-reponse={false}\r\n                        variant=\"outline-danger\"\r\n                        onClick={props.skip}\r\n                    >\r\n                        {\" \"}\r\n                        Passer{\" \"}\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default class GameInterface extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            timer: 5,\r\n            baseTimer: 5,\r\n            questionPose: false,\r\n            mode: null,\r\n        };\r\n    }\r\n    setMode = (mode) => {\r\n        this.setState({\r\n            mode,\r\n        });\r\n        clearTimeout(this.timeout);\r\n        clearInterval(this.interval);\r\n    };\r\n\r\n    launchTimer = () => {\r\n        this.setState({\r\n            questionPose: true,\r\n        });\r\n        this.interval = setInterval(() => {\r\n            this.setState({\r\n                timer: this.state.timer - 1,\r\n            });\r\n        }, 1000);\r\n        this.timeout = setTimeout(() => {\r\n            clearInterval(this.interval);\r\n        }, this.state.baseTimer * 1000);\r\n    };\r\n\r\n    answer = (bonneReponse) => {\r\n        this.props.finish(bonneReponse, this.state.mode);\r\n        this.setState({\r\n            mode: null,\r\n            answer: false,\r\n            questionPose: false,\r\n            timer: 5,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <QUESTION_INTERFACE className=\"shadow-game\">\r\n                {!this.state.questionPose && (\r\n                    <div className=\"initialize\">\r\n                        {this.props.canLaunch ? (\r\n                            <Button\r\n                                style={{\r\n                                    height: \"auto\",\r\n                                    width: \"150px\",\r\n                                    minHeight: \"100px\",\r\n                                    fontSize: \"1.5rem\",\r\n                                }}\r\n                                variant=\"outline-info\"\r\n                                onClick={this.launchTimer}\r\n                            >\r\n                                Lancer\r\n                            </Button>\r\n                        ) : (\r\n                            <h2 className=\"text-danger\">\r\n                                Selectionne une équipe et un thème !\r\n                            </h2>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {this.state.questionPose &&\r\n                    this.props.questionToDisplay !== null && (\r\n                        <div className=\"text-center\">\r\n                            <h2>{this.props.questionToDisplay?.question}</h2>\r\n                        </div>\r\n                    )}\r\n                {this.state.mode === null && this.state.questionPose && (\r\n                    <SelectionGameMode\r\n                        baseTimer={this.state.baseTimer}\r\n                        timer={this.state.timer}\r\n                        setMode={this.setMode}\r\n                        skip={this.answer}\r\n                    />\r\n                )}\r\n\r\n                {this.state.mode !== null && (\r\n                    <Reponses\r\n                        answer={this.answer}\r\n                        mode={this.state.mode}\r\n                        question={this.props.questionToDisplay}\r\n                    />\r\n                )}\r\n            </QUESTION_INTERFACE>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Col, Container } from \"react-bootstrap\";\r\nimport * as DAOEquipe from \"../../core/dao/DAOEquipes\";\r\nimport * as DAOQuestion from \"../../core/dao/DAOQuestion\";\r\nimport EquipesList from \"./equipesList/EquipesList\";\r\nimport ThemeList from \"./themesList/ThemeList\";\r\nimport GameInterface from \"./gameInterface/GameInterface\";\r\n\r\nconst GAME = \"game\";\r\nexport default class Game extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            equipes: DAOEquipe.getAll(),\r\n            selectedEquipe: null,\r\n            selectedTheme: null,\r\n            questions: [],\r\n            currentQuestionIndex: 0,\r\n            isLoaded: false,\r\n        };\r\n    }\r\n\r\n    updateStateAndSave(object) {\r\n        this.setState({ ...object }, () => {\r\n            localStorage.setItem(GAME, JSON.stringify(this.state));\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        this.loadGameStateFromLocalStorageIfExistElseCreate();\r\n    }\r\n    loadGameStateFromLocalStorageIfExistElseCreate() {\r\n        const objectGame =\r\n            JSON.parse(localStorage.getItem(GAME)) ?? this.initialize();\r\n        this.setState({\r\n            isLoaded: true,\r\n            ...objectGame,\r\n        });\r\n    }\r\n\r\n    initialize = () => {\r\n        return {\r\n            selectedEquipe: null,\r\n            selectedTheme: null,\r\n            questions: [],\r\n            currentQuestionIndex: 0,\r\n        };\r\n    };\r\n\r\n    selectTheme = (theme) => {\r\n        const themeQuestions = DAOQuestion.getQuestionByTheme(theme.id);\r\n        const questions = Object.keys(themeQuestions).map(\r\n            (v) => themeQuestions[v]\r\n        );\r\n        this.updateStateAndSave({\r\n            selectedTheme: theme,\r\n            questions: questions,\r\n            currentQuestionIndex: 0,\r\n        });\r\n    };\r\n\r\n    selectEquipe = (equipe) => {\r\n        this.updateStateAndSave({ selectedEquipe: equipe });\r\n    };\r\n\r\n    finish = (bonneReponse = false, mode) => {\r\n        let newState = this.setNewScore(bonneReponse, mode);\r\n        newState = {\r\n            ...newState,\r\n            ...(this.state.currentQuestionIndex !==\r\n            this.state.questions.length - 1\r\n                ? this.changeQuestionAndRemoveQuestionFromArray()\r\n                : this.initialize()),\r\n        };\r\n\r\n        this.updateStateAndSave(newState);\r\n    };\r\n\r\n    giveBonusOrMalusSelectedEquipe = (e) => {\r\n        e.stopPropagation();\r\n        console.log(e.target.dataset.idEquipe);\r\n        let equipe = this.state.equipes[e.target.dataset.idEquipe];\r\n        equipe.score += parseInt(e.target.dataset.value);\r\n        this.updateStateAndSave({\r\n            equipes: { ...this.state.equipes, [equipe.id]: equipe },\r\n        });\r\n    };\r\n\r\n    setNewScore = (bonneReponse = false, mode) => {\r\n        let equipe = this.state.equipes[this.state?.selectedEquipe?.id];\r\n        equipe.score = bonneReponse ? equipe.score + mode.score : equipe.score;\r\n        return {\r\n            equipes: {\r\n                ...this.state.equipes,\r\n                [this.state.selectedEquipe.id]: equipe,\r\n            },\r\n            selectedEquipe: equipe,\r\n        };\r\n    };\r\n    changeQuestionAndRemoveQuestionFromArray = () => {\r\n        return {\r\n            currentQuestionIndex: Math.min(\r\n                this.state.currentQuestionIndex + 1,\r\n                this.state.questions.length - 1\r\n            ),\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return this.state.isLoaded ? (\r\n            <Container fluid className=\"d-flex flex-column\">\r\n                <div className=\"d-flex flex-row justify-content-between mt-4\">\r\n                    <Col md=\"3\" className=\"d-flex\">\r\n                        <ThemeList\r\n                            selectedTheme={this.state.selectedTheme}\r\n                            selectTheme={this.selectTheme}\r\n                        />\r\n                    </Col>\r\n                    <Col>\r\n                        <GameInterface\r\n                            theme={this.state.theme}\r\n                            equipe={this.state.selectedEquipe}\r\n                            canLaunch={\r\n                                this.state.selectedTheme !== null &&\r\n                                this.state.selectedEquipe !== null\r\n                            }\r\n                            questionToDisplay={\r\n                                this.state.questions[\r\n                                    this.state.currentQuestionIndex\r\n                                ]\r\n                            }\r\n                            finish={this.finish}\r\n                        />\r\n                    </Col>\r\n                    <Col md=\"3\" className=\"d-flex rounded bg-ligth\">\r\n                        <EquipesList\r\n                            equipes={this.state.equipes}\r\n                            selectEquipe={this.selectEquipe}\r\n                            selectedEquipe={this.state.selectedEquipe}\r\n                            giveBonusOrMalusSelectedEquipe={\r\n                                this.giveBonusOrMalusSelectedEquipe\r\n                            }\r\n                        />\r\n                    </Col>\r\n                </div>\r\n            </Container>\r\n        ) : (\r\n            <h2> En chargement </h2>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport HeaderNavigation from \"./components/NavBar\";\nimport Administration from \"./features/admin/Admin\";\nimport Game from \"./features/game/Game\";\n\nfunction App() {\n    return (\n        <div className=\"d-flex flex-column flex-grow-1\">\n            <HeaderNavigation />\n            <Switch>\n                <Route path=\"/admin\" component={Administration} />\n                <Route component={Game} />\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nwindow.onbeforeunload = function (e) {\n    e = e || window.event;\n\n    // For IE and Firefox prior to version 4\n    if (e) {\n        e.returnValue = \"Sure?\";\n    }\n\n    // For Safari\n    return \"Sure?\";\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter basename=\"quizzdiscord\">\n            <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}